var searchIndex = new Map(JSON.parse('[\
["driver",{"doc":"driver binary crate","t":"H","n":["main"],"q":[[0,"driver"],[1,"anyhow"]],"d":["main function"],"i":[0],"f":[[[],[[2,[1]]]]],"c":[],"p":[[1,"tuple"],[8,"Result",1]],"b":[]}],\
["waveguide",{"doc":"fdtd_waveguide library","t":"SSSSCCCFSFSNNNNNNOOOOOOOOONNNNNOOOOOONNNNNNONONNNNNNNNNNNNNNNNNNNNNNFNNOOOOOOOONNNOONOOOOONNNOOOFFNNNNOOONOOONNONNONNOONNOOONNNNNNNOOOOO","n":["C_0","EP_0","ETA_0","MU_0","engine","geometry","solver","Engine","ONE_OVER_TWO","ScalarField","TFSF_SRC_IDX","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","column_offset","cur_time","ex","ex_wtr","ey","ey_wtr","ez","ez_wtr","field","flush_fields","fmt","fmt","from","from","hx","hx_wtr","hy","hy_wtr","hz","hz_wtr","idx","idxm","into","into","new","new","row_offset","snapshot_fields","snapshot_steps","tapered_sin","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","update_e","update_ex","update_ey","update_ez","update_h","update_hx","update_hy","update_hz","update_mur_abc_ey","update_mur_abc_hx","update_tfsf_source_ey","update_tfsf_source_hx","write_buf_vec","Geometry","borrow","borrow_mut","dx","dx_inv","dy","dy_inv","dz","dz_inv","ep","ep_r","fmt","from","into","mu","mu_r","new","num_vox","num_vox_x","num_vox_y","num_vox_z","sigma","try_from","try_into","type_id","x_len","y_len","z_len","Config","Solver","borrow","borrow","borrow_mut","borrow_mut","buffered_snapshots","config","delay_time","deserialize","end_time","engine","ep_r","fmt","fmt","frequency","from","from","geometry","into","into","max_frequency","mu_r","new","new","ramp_time","sigma","snapshot_steps","try_from","try_from","try_into","try_into","type_id","type_id","update","voxels_per_min_feature","voxels_per_min_wavelength","x_len","y_len","z_len"],"q":[[0,"waveguide"],[7,"waveguide::engine"],[68,"waveguide::geometry"],[96,"waveguide::solver"],[136,"anyhow"],[137,"core::fmt"],[138,"core::fmt"],[139,"core::any"],[140,"std::fs"],[141,"std::io::buffered::bufwriter"],[142,"csv::writer"],[143,"serde::de"]],"d":["","","","","Engine module","Geometry Module","Solver module","Engine struct","","ScalarField struct","","","","","","","","","","","","","","","","","flushes remaining data in buffers to disk if present","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","returns an aliased value at position [i,j,k] in ScalarField","returns a mutable reference to value at position [i,j,k] …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","ScalarField constructor","Engine constructor","","snapshots all field values","","computes the value of a tapered sin wave using parameters …","","","","","","","","updates all fields to time specified in config.end_time","updates all electric field components in dielectric region …","updates all Ex components in dielectric region using …","updates all Ey components in dielectric region using …","updates all Ez components in dielectric region using …","updates all magnetic field components in dielectric region …","updates all Hx components in dielectric region using …","updates all Hy components in dielectric region using …","updates all Hz components in dielectric region using …","updates Ey field points on z-low plane using Mur ABC scheme","updates Hx field points on z-low plane using Mur ABC scheme","injects an Hx source field into Ey using the TF/SF method …","injects an Ey source field into Hx using the TF/SF method …","writes data found in &amp;f64 into a buffered writer","Geometry struct","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Geometry constructor","","","","","","","","","","","","Config struct","Solver struct","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Solver constructor","Config constructor","","","","","","","","","","calls all relevant methods to update the simulation to a …","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,3,1,3,1,1,1,3,3,3,3,3,3,3,1,3,1,3,1,3,3,3,3,3,3,3,1,1,1,3,1,3,1,3,3,3,1,1,3,1,3,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,18,9,18,9,9,18,9,9,9,18,9,18,9,9,18,9,18,18,9,9,9,18,9,9,9,9,18,9,18,9,18,9,18,9,9,9,9,9],"f":[0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],0,0,0,0,0,0,0,0,0,[3,[[4,[2]]]],[[1,5],6],[[3,5],6],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,0,[[1,7,7,7],8],[[1,7,7,7],8],[-1,-2,[],[]],[-1,-2,[],[]],[[8,7,7,7],[[4,[1]]]],[[9,10],[[4,[3]]]],0,[3,[[4,[2]]]],0,[[3,9],8],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[[3,9,10],[[4,[2]]]],[[3,10,8,8],2],[[3,10,8,8],2],[[3,10,8,8],2],[[3,10,8,8],2],[[3,10,8,8,8],2],[[3,10,8,8],2],[[3,10,8,8],2],[[3,10,8,8],2],[[3,10,8,8,8,8,1,1],2],[[3,10,8,8,8,8,1,1],2],[[3,9,10,8],2],[[3,9,10,8],2],[[[15,[[14,[13]]]],[16,[8]]],[[4,[2]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[10,5],6],[-1,-1,[]],[-1,-2,[],[]],0,0,[9,[[4,[10]]]],0,0,0,0,0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,[[11,[9]]],17],0,0,0,[[18,5],6],[[9,5],6],0,[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[9,[[4,[18]]]],[19,[[4,[9]]]],0,0,0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[18,[[4,[2]]]],0,0,0,0,0],"c":[],"p":[[5,"ScalarField",7],[1,"tuple"],[5,"Engine",7],[8,"Result",136],[5,"Formatter",137],[8,"Result",137],[1,"usize"],[1,"f64"],[5,"Config",96],[5,"Geometry",68],[6,"Result",138],[5,"TypeId",139],[5,"File",140],[5,"BufWriter",141],[5,"Writer",142],[1,"slice"],[10,"Deserializer",143],[5,"Solver",96],[1,"str"]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
